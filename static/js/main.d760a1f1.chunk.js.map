{"version":3,"sources":["components/Head.jsx","components/CntJumbotron.jsx","App.js","serviceWorker.js","index.js"],"names":["Head","className","Navbar","Nav","as","Item","Link","eventKey","href","Component","CntJumbotron","Jumbotron","Button","variant","size","App","Container","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sUAGqBA,E,uKAEb,OACA,oCACI,wBAAIC,UAAU,cAAd,gBACA,kBAACC,EAAA,EAAD,CAAQD,UAAU,IACd,kBAACE,EAAA,EAAD,CAAKC,GAAG,KAAKH,UAAU,qBACnB,kBAACE,EAAA,EAAIE,KAAL,CAAUD,GAAG,KAAKH,UAAU,UACxB,kBAACE,EAAA,EAAIG,KAAL,CAAUC,SAAS,IAAIC,KAAK,KAA5B,SAIJ,kBAACL,EAAA,EAAIE,KAAL,CAAUD,GAAG,MACT,kBAACD,EAAA,EAAIG,KAAL,CAAUC,SAAS,IAAIC,KAAK,KAA5B,aAIJ,kBAACL,EAAA,EAAIE,KAAL,CAAUD,GAAG,MACT,kBAACD,EAAA,EAAIG,KAAL,CAAUC,SAAS,IAAIC,KAAK,KAA5B,aAIJ,kBAACL,EAAA,EAAIE,KAAL,CAAUD,GAAG,MACT,kBAACD,EAAA,EAAIG,KAAL,CAAUC,SAAS,IAAIC,KAAK,KAA5B,cAIJ,kBAACL,EAAA,EAAIE,KAAL,CAAUD,GAAG,MACT,kBAACD,EAAA,EAAIG,KAAL,CAAUC,SAAS,IAAIC,KAAK,KAA5B,UAIJ,kBAACL,EAAA,EAAIE,KAAL,CAAUD,GAAG,MACT,kBAACD,EAAA,EAAIG,KAAL,CAAUC,SAAS,IAAIC,KAAK,KAA5B,mB,GAjCUC,a,gBCAbC,E,uKAEb,OACI,oCACE,kBAACC,EAAA,EAAD,KACE,gDACA,uBAAGV,UAAU,QAAb,4KACA,2BAAG,kBAACW,EAAA,EAAD,CAAQC,QAAQ,eAAeC,KAAK,MAApC,qBAAH,W,GAP0BL,a,YCY3BM,MATf,WACE,OACE,kBAACC,EAAA,EAAD,KACI,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d760a1f1.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { Nav,Navbar } from 'react-bootstrap';\r\n \r\nexport default class Head extends Component {\r\n    render() {\r\n        return (\r\n        <>\r\n            <h3 className=\"text-muted\">Project name</h3>\r\n            <Navbar className=\"\">\r\n                <Nav as=\"ul\" className=\"nav nav-justified\">\r\n                    <Nav.Item as=\"li\" className=\"active\">\r\n                        <Nav.Link eventKey=\"1\" href=\"#\">\r\n                            Home\r\n                        </Nav.Link>\r\n                    </Nav.Item>\r\n                    <Nav.Item as=\"li\">\r\n                        <Nav.Link eventKey=\"2\" href=\"#\">\r\n                            Projects\r\n                        </Nav.Link>\r\n                    </Nav.Item>\r\n                    <Nav.Item as=\"li\">\r\n                        <Nav.Link eventKey=\"3\" href=\"#\">\r\n                            Services\r\n                        </Nav.Link>\r\n                    </Nav.Item>\r\n                    <Nav.Item as=\"li\">\r\n                        <Nav.Link eventKey=\"4\" href=\"#\">\r\n                            Downloads\r\n                        </Nav.Link>\r\n                    </Nav.Item>\r\n                    <Nav.Item as=\"li\">\r\n                        <Nav.Link eventKey=\"5\" href=\"#\">\r\n                            About\r\n                        </Nav.Link>\r\n                    </Nav.Item>\r\n                    <Nav.Item as=\"li\">\r\n                        <Nav.Link eventKey=\"6\" href=\"#\">\r\n                            Contact\r\n                        </Nav.Link>\r\n                    </Nav.Item>\r\n                </Nav>\r\n            </Navbar>\r\n        </>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Jumbotron,Button } from 'react-bootstrap';\r\n\r\nexport default class CntJumbotron extends Component {\r\n    render() {\r\n        return (\r\n            <>\r\n              <Jumbotron>\r\n                <h1>Marketing stuff!</h1>\r\n                <p className=\"lead\">Cras justo odio, dapibus ac facilisis in, egestas eget quam. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet.</p>\r\n                <p><Button variant=\"success link\" size=\"lg\">Get started today</Button> </p>\r\n              </Jumbotron>\r\n            </>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\nimport { Container } from 'react-bootstrap';\nimport Head from './components/Head'\nimport CntJumbotron from './components/CntJumbotron'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nfunction App() {\n  return (\n    <Container>\n        <Head/>\n        <CntJumbotron/>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}